<div class="container">
  <div class="row">
    <div class="col-8" id="tweet-column">
      <!-- 新增推文 -->
      <!-- <%= form_for @tweet do |f| %>
        <div class="form-group">
          <%= f.text_area :description, placeholder: "What's on your mind?", class: "form-control" %>
        </div>

        <div class="form-group float-right">
          <%= f.submit "Tweet", class: "btn btn-primary" %>
          <%= f.button "Clear", type: :reset, class: "btn btn-light" %>
        </div>
      <% end %> -->

      <!-- 新增推文(非同步) -->
      <form class="">
        <div class="form-group">
          <input type="text_area" class="form-control" id="tweet-text"/>
        </div>

        <div class="form-group float-right">
          <button id="create-tweet" class="btn btn-primary">Tweet</button>
        </div>
      </form>

      <div class="clearfix"></div>

      <hr>
      <!-- # 顯示 Tweets：排序依日期，最新的在前 -->
      <div id="tweet">
        <%= render partial: "shared/tweet_content", locals: {tweets_object: @tweets} %>
      </div>
    </div>

    <div class="col-4">
      <h1>Popular</h1>
      <div class="row">
      <% @users.each do |follow_user| %>
        <div class="col-12">
          <div class="border follow_user_content">
            <div class="row">
              <div class="col-4">
                <%= filestack_image follow_user.avatar, transform: filestack_transform.resize(width:100, height:100) %>
              </div>

              <div class="col-8">
                <%= link_to "#{follow_user.name}", tweets_user_path(follow_user.id) %>
                <%= simple_format follow_user.introduction %>

                <div class="float-right">
                  <%= render partial: "shared/follow_button", locals: { follow_object: follow_user } %>
                </div>

              </div>
            </div>
          </div>
        </div>
      <% end %>
      </div>
    </div>

    <h4 id="end" class="text-center"></h4>
  </div>
</div>



<script>
  // 找出所有帶有 .delete-tweet 的 HTML elements
  // 並透過 jQuery 的 on 方法設定 click 事件
  $('#tweet-column').on('click', '.delete-tweet', function(event) {
    // 用 DOM 方法取得 id，這邊就會用到 event 了！
    // 並用 console.log 確認是對的
    var id = event.target.parentNode.parentNode.id;
    console.log(id);

    // 用 $.ajax 發送非同步 DELETE request
    $.ajax({
      url: 'admin/tweets/' + id,
      method: 'DELETE',
      dataType: 'json',
      success: function(data) {
        // 取出 tweet id
        $('#' + data['id']).remove();
      }
    });
  });

  // 新增 Tweet via jQuery ajax
  $('#create-tweet').on('click', function(event) {
    event.preventDefault();
    $.ajax({
      url: 'tweets/',
      method: 'POST',
      data: {
        tweet: {
          // 這邊的欄位值要到 tweets_controller 確認正確
          description: $('#tweet-text').val()
        }
      },
      dataType: 'json',
      success: function(data) {
        console.log(data);

        // 先產生一個把整個 tweet content 包住的 html element
        var tweet = document.createElement('div');
        console.log(tweet);

        // 當 html 方法的括號沒有帶入資料時，即拿出裡面的網頁內容；當 html 方法的括號有帶入資料時，即將該資料取代原本的內容。
        // 所以用 template 取代剛建立的 tweet
        $(tweet).html( $('#tweet-template').html() );

        $(tweet).find('.tweet_content').attr('id', data['id']);

        $(tweet).find('.description').html(data['description']);
        $(tweet).find('.create-date').html(data['createDate']);
        $(tweet).find('.create-time').html(data['createTime']);

        $(tweet).find('.user-name').html(data['userName']);
        $(tweet).find('.user-name').attr('href', data['userUrl']);

        $(tweet).find('.avatar').attr('src', data['userAvatar']);

        $(tweet).find('.reply-button').attr('href', data['replyUrl']);
        $(tweet).find('.like-button').attr('title', data['likeUrl']);

        $('#tweet').prepend(tweet);
      }
    });
  });

  // 記錄最後載入的 tweet id
  var current_tweet_id = <%= @tweets.last.id %>

</script>

<script type="text/template" id="tweet-template">
  <div class="row border tweet_content" id="">
    <div class="col-2">
      <!-- 大頭貼 -->
      <img class="avatar" src="" height="100" width="100">
    </div>

    <div class="col-10">
      <!-- 使用者名稱 -->
      <a class="user-name" href=""></a>,
      <!-- 推文建立日期，時間 -->
      <span class="create-date"></span>,
      <span class="create-time"></span>

      <!-- 推文內容 -->
      <p class="description"></p>

      <!-- reply button -->
      <a class="reply-button">Reply(0)</a>

      <!-- like button -->
      <!-- <a class="text-secondary like-button" data-method="post">like(0)</a> -->
      <span class="text-secondary like-button btn btn-link" data-method="post">like(0)</span>

      <!-- delete button -->
      <% if current_user.is_admin? %>
        <span class="delete-tweet btn btn-danger">Delete</span>
      <% end %>

    </div>

  </div>
</script>

<!-- AJAX 無限卷軸 -->
<script>
  // 記錄最後載入的 tweet id
  var current_tweet_id = <%= @tweets.last.id %>

  // 透過事件驅動發出非同步 GET 請求
  // 設定無限捲軸的事件驅動
  $(window).on('scroll', function(event) {
    // 觸發條件：當瀏覽器視窗的高度 + 捲動條的上端 >= 整個網頁內容的高度時
    // 表示卷軸已經捲到底了
    // 這部分用 atom 的 minimap package 觀察就很好理解
    var scrollHeight = window.innerHeight + window.scrollY;
    if ( scrollHeight >= document.body.offsetHeight ) {
      // 用 $.ajax 發送非同步請求
      $.ajax({
        // 並附帶最後一筆 current_tweet_id 參數
        url: '/tweets/load?current_tweet_id=' + current_tweet_id,
        method: 'GET',
        dataType: 'json',
        success: function(data) {
          // 從 tweets#load 獲得要載入的 tweets
          // 因爲網頁一捲到底就會觸發，所以有可能已經將所有的 tweets 都載入完畢，那這時候就要顯示 No more tweets
          var tweets = data['data'];
          console.log(tweets);
          if ( tweets.length > 0 ) {
            // 用 forEach 逐個讀出陣列的元素值
            tweets.forEach(function(value, index) {
              // 將每個 tweet 拼成 tweet HTML elements
              // 我這邊直接複製 tweets#create as JSON 的程式碼

              // 先產生一個把整個 tweet content 包住的 html element
              var tweet = document.createElement('div');
              // tweet.id = tweets[index]['id'];
              // console.log(tweet.id);

              // 當 html 方法的括號沒有帶入資料時，即拿出裡面的網頁內容；當 html 方法的括號有帶入資料時，即將該資料取代原本的內容。
              // 所以用 template 取代剛建立的 tweet
              $(tweet).html( $('#tweet-template').html() );

              $(tweet).find('.tweet_content').attr('id', tweets[index]['id']);

              $(tweet).find('.description').html(tweets[index]['description']);
              $(tweet).find('.create-date').html(tweets[index]['createDate']);
              $(tweet).find('.create-time').html(tweets[index]['createTime']);

              $(tweet).find('.user-name').html(tweets[index]['userName']);
              $(tweet).find('.user-name').attr('href', tweets[index]['userUrl']);

              $(tweet).find('.avatar').attr('src', tweets[index]['userAvatar']);

              $(tweet).find('.reply-button').attr('href', tweets[index]['replyUrl']);
              $(tweet).find('.reply-button').html('Reply(' + tweets[index]['replyCount'] + ')');

              $(tweet).find('.like-button').attr('title', tweets[index]['likeUrl']);

              if (tweets[index]['likeStatus']) {
                $(tweet).find('.like-button').html('unlike(' + tweets[index]['likeCount'] + ')');
              } else {
                $(tweet).find('.like-button').html('like(' + tweets[index]['likeCount'] + ')');
              }

              $('#tweet').append(tweet);
              // console.log(tweet);

              // 最後記得要記錄最後的 tweet_id
              // 這個取值方式。。。先選是哪個 tweet 再把它的 id 值 取出來
              current_tweet_id = tweets[index]['id'];
            });
          } else {
            // No more tweets
            $("#end").html("No more tweet.")
          }

        }
      });
    }
  });

  //  AJAX like/unlike 按鈕
  // 找出所有帶有 .like-button 的 HTML elements
  // 並透過 jQuery 的 on 方法設定 click 事件
  // 因爲要考慮到有些按鈕是 卷軸觸底後才用 $.ajax 生出來的，所以綁定觸發事件的方式要從上層綁起
  $('#tweet-column').on('click', '.like-button', function(event) {
    // 用 DOM 方法取得 id，這邊就會用到 event 了！
    // 找到 tweet 本體
    var tweet = event.target.parentNode.parentNode
    // 找到該 tweet.id
    var id = event.target.parentNode.parentNode.id;
    console.log(id);

    var requestUrl = event.target.title;
    console.log(requestUrl);

    $.ajax({
      url: requestUrl,
      method: 'POST',
      dataType: 'json',
      success: function(data) {
        console.log(data);
        // 更新 like/unlike button 還有 count
        $(tweet).find('.like-button').attr('title', data['likeUrl']);

        if (data['likeStatus']) {
          $(tweet).find('.like-button').html('unlike(' + data['likeCount'] + ')');
        } else {
          $(tweet).find('.like-button').html('like(' + data['likeCount'] + ')');
        }
      }
    });
  });
</script>
